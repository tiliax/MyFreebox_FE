{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { useMap } from \"react-leaflet\";\nimport { SearchControl, OpenStreetMapProvider } from 'leaflet-geosearch'; // import { OpenStreetMapProvider, GeoSearchControl } from \"leaflet-geosearch\";\n\nimport 'leaflet-geosearch/dist/geosearch.css';\nexport default function MapSearch() {\n  _s();\n\n  const map = useMap();\n  const provider = new OpenStreetMapProvider();\n  const search = new SearchControl({\n    provider,\n    style: \"bar\",\n    showMarker: true,\n    // optional: true|false  - default true\n    showPopup: false,\n    // optional: true|false  - default false\n    marker: {\n      // optional: L.Marker    - default L.Icon.Default\n      icon: new L.Icon.Default(),\n      draggable: false\n    },\n    popupFormat: _ref => {\n      let {\n        query,\n        result\n      } = _ref;\n      return result.label;\n    },\n    // optional: function    - default returns result label,\n    resultFormat: _ref2 => {\n      let {\n        result\n      } = _ref2;\n      return result.label;\n    },\n    // optional: function    - default returns result label\n    maxMarkers: 1,\n    // optional: number      - default 1\n    retainZoomLevel: false,\n    // optional: true|false  - default false\n    animateZoom: true,\n    // optional: true|false  - default true\n    autoClose: false,\n    // optional: true|false  - default false\n    searchLabel: 'Enter address',\n    // optional: string      - default 'Enter address'\n    keepResult: false,\n    // optional: true|false  - default false\n    updateMap: true // optional: true|false  - default true\n\n  });\n  useEffect(() => {\n    map.addControl(search);\n    return () => map.removeControl(search);\n  }, []);\n  return null;\n} // https://github.com/smeijer/leaflet-geosearch\n\n_s(MapSearch, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n\n_c = MapSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapSearch\");","map":{"version":3,"names":["useEffect","useMap","SearchControl","OpenStreetMapProvider","MapSearch","map","provider","search","style","showMarker","showPopup","marker","icon","L","Icon","Default","draggable","popupFormat","query","result","label","resultFormat","maxMarkers","retainZoomLevel","animateZoom","autoClose","searchLabel","keepResult","updateMap","addControl","removeControl"],"sources":["C:/Users/Larix/Documents/Programmieren/ABSCHLUSS/wbs-final-box-fe/src/components/MapSearch.js"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { useMap } from \"react-leaflet\";\r\nimport { SearchControl, OpenStreetMapProvider } from 'leaflet-geosearch';\r\n// import { OpenStreetMapProvider, GeoSearchControl } from \"leaflet-geosearch\";\r\nimport 'leaflet-geosearch/dist/geosearch.css';\r\n\r\nexport default function MapSearch() {\r\n    const map = useMap();\r\n    const provider = new OpenStreetMapProvider();\r\n    \r\n    const search = new SearchControl({\r\n      provider,\r\n      style: \"bar\",\r\n\r\n      showMarker: true, // optional: true|false  - default true\r\n      showPopup: false, // optional: true|false  - default false\r\n      marker: {\r\n        // optional: L.Marker    - default L.Icon.Default\r\n        icon: new L.Icon.Default(),\r\n        draggable: false,\r\n      },\r\n      popupFormat: ({ query, result }) => result.label, // optional: function    - default returns result label,\r\n      resultFormat: ({ result }) => result.label, // optional: function    - default returns result label\r\n      maxMarkers: 1, // optional: number      - default 1\r\n      retainZoomLevel: false, // optional: true|false  - default false\r\n      animateZoom: true, // optional: true|false  - default true\r\n      autoClose: false, // optional: true|false  - default false\r\n      searchLabel: 'Enter address', // optional: string      - default 'Enter address'\r\n      keepResult: false, // optional: true|false  - default false\r\n      updateMap: true, // optional: true|false  - default true\r\n\r\n    });\r\n    \r\n    \r\n    useEffect(() => {\r\n        map.addControl(search);\r\n        return () => map.removeControl(search);\r\n    }, [])\r\n    \r\n\r\n  return null\r\n}\r\n\r\n\r\n// https://github.com/smeijer/leaflet-geosearch\r\n"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,SAASC,aAAT,EAAwBC,qBAAxB,QAAqD,mBAArD,C,CACA;;AACA,OAAO,sCAAP;AAEA,eAAe,SAASC,SAAT,GAAqB;EAAA;;EAChC,MAAMC,GAAG,GAAGJ,MAAM,EAAlB;EACA,MAAMK,QAAQ,GAAG,IAAIH,qBAAJ,EAAjB;EAEA,MAAMI,MAAM,GAAG,IAAIL,aAAJ,CAAkB;IAC/BI,QAD+B;IAE/BE,KAAK,EAAE,KAFwB;IAI/BC,UAAU,EAAE,IAJmB;IAIb;IAClBC,SAAS,EAAE,KALoB;IAKb;IAClBC,MAAM,EAAE;MACN;MACAC,IAAI,EAAE,IAAIC,CAAC,CAACC,IAAF,CAAOC,OAAX,EAFA;MAGNC,SAAS,EAAE;IAHL,CANuB;IAW/BC,WAAW,EAAE;MAAA,IAAC;QAAEC,KAAF;QAASC;MAAT,CAAD;MAAA,OAAuBA,MAAM,CAACC,KAA9B;IAAA,CAXkB;IAWmB;IAClDC,YAAY,EAAE;MAAA,IAAC;QAAEF;MAAF,CAAD;MAAA,OAAgBA,MAAM,CAACC,KAAvB;IAAA,CAZiB;IAYa;IAC5CE,UAAU,EAAE,CAbmB;IAahB;IACfC,eAAe,EAAE,KAdc;IAcP;IACxBC,WAAW,EAAE,IAfkB;IAeZ;IACnBC,SAAS,EAAE,KAhBoB;IAgBb;IAClBC,WAAW,EAAE,eAjBkB;IAiBD;IAC9BC,UAAU,EAAE,KAlBmB;IAkBZ;IACnBC,SAAS,EAAE,IAnBoB,CAmBd;;EAnBc,CAAlB,CAAf;EAwBA5B,SAAS,CAAC,MAAM;IACZK,GAAG,CAACwB,UAAJ,CAAetB,MAAf;IACA,OAAO,MAAMF,GAAG,CAACyB,aAAJ,CAAkBvB,MAAlB,CAAb;EACH,CAHQ,EAGN,EAHM,CAAT;EAMF,OAAO,IAAP;AACD,C,CAGD;;GAtCwBH,S;UACRH,M;;;KADQG,S"},"metadata":{},"sourceType":"module"}